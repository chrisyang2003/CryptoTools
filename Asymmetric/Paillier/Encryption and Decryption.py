from Crypto.Util.number import *


def Decryption(p, q, n, c):
    lcm = ((p - 1) * (q - 1)) // GCD(p - 1, q - 1)

    a = (pow(c, lcm, n * n) - 1) // n
    b = (pow(n + 1, lcm, n * n) - 1) // n
    b_inv = inverse(b, n)
    print(long_to_bytes((a * b_inv) % n))

if __name__ == '__main__':
    c = 29088911054711509252215615231015162998042579425917914434962376243477176757448053722602422672251758332052330100944900171067962180230120924963561223495629695702541446456981441239486190458125750543542379899722558637306740763104274377031599875275807723323394379557227060332005571272240560453811389162371812183549
    n = 6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093
    q = 80006336965345725157774618059504992841841040207998249416678435780577798937819
    p = 80006336965345725157774618059504992841841040207998249416678435780577798937447

    Decryption(p, q, n, c)



    
